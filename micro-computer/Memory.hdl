// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    //Memory  16K. 0 -16383  一共14位
    // 0000 0000 0000 0000
    // 0011 1111 1111 1111
    // screen 8K
    // 0100 0000 0000 0000
    // 0101 0000 0000 0000
    // 键盘 Keyboard
    // 0110 0000 0000 0000

    //因为位置是分配号的,所以 看最高两位 [13 .. 14 ]  这两位.
    // 00,01 ,是 RAM
    // 10  是screen  //11 是 KBD
    // 这里需要一个 DMux4Way,这样能2分四 
    //其中 a,b两个是 RAM16中的选项 . 这个和 RAM4 -- RAM8类似.将多个 小的空间组成打的空间.

    DMux4Way(in=load,sel= address[13..14],a=lr1,b=lr2,c=ls,d=lk);
    Or(a=lr1,b=lr2,out=lr);
    RAM16K(in=in,load=lr,address=address[0..13],out=ramOut);

    Screen(in=in,load=ls,address=address[0..12],out=screenOut);
    Keyboard(out=kbdOut);

    Mux4Way16(a=ramOut,b=ramOut,c=screenOut,d=kbdOut,sel=address[13..14],out=out);


}